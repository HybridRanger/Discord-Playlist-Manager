import { BaseExtractor, Playlist, Track, ExtractorSearchContext, ExtractorInfo, ExtractorStreamable, GuildQueueHistory } from 'discord-player';
import { Readable } from 'stream';
import { User } from 'discord.js';

interface SP_ACCESS_TOKEN {
    token: string;
    expiresAfter: number;
    type: "Bearer";
}
declare class SpotifyAPI {
    accessToken: SP_ACCESS_TOKEN | null;
    private clientId;
    private clientSecret;
    private market;
    useCredentials: boolean;
    constructor(credentials: {
        clientId?: string;
        clientSecret?: string;
        market?: string;
    });
    private get authorizationKey();
    requestToken(): Promise<void>;
    private isTokenExpired;
    private ensureValidToken;
    private fetchData;
    search(query: string): Promise<{
        title: string;
        duration: number;
        artist: string;
        url: string;
        thumbnail: string | null;
    }[] | null>;
    getPlaylist(id: string): Promise<{
        name: string;
        author: string;
        thumbnail: string | null;
        id: string;
        url: string;
        tracks: {
            name: string;
            duration_ms: number;
            artists: {
                id: string;
                name: string;
            }[];
            external_urls: {
                spotify: string;
            };
            id: string;
            album: {
                images: {
                    height: number;
                    url: string;
                    width: number;
                }[];
            };
        }[];
    } | null>;
    getAlbum(id: string): Promise<{
        name: string;
        author: string;
        thumbnail: string | null;
        id: string;
        url: string;
        tracks: {
            name: string;
            duration_ms: number;
            artists: {
                id: string;
                name: string;
            }[];
            external_urls: {
                spotify: string;
            };
            id: string;
            album: {
                images: {
                    url: string;
                }[];
            };
        }[];
    } | null>;
    getTrack(id: string): Promise<{
        name: string;
        duration_ms: number;
        artists: {
            id: string;
            name: string;
        }[];
        external_urls: {
            spotify: string;
        };
        id: string;
        album: {
            images: {
                height: number;
                url: string;
                width: number;
            }[];
        };
    } | null>;
    getRecommendations(trackIds: Array<string>, limit?: number): Promise<{
        title: string;
        duration: number;
        artist: string;
        url: string;
        thumbnail: string | null;
    }[] | null>;
    private buildTokenUrl;
    private calculateToken;
    private getAccessTokenUrl;
}

interface SpotifyUrlParseResult {
    queryType: string;
    id: string;
}
declare const parseSpotifyUrl: (q: string) => SpotifyUrlParseResult;

interface SpotifyExtractorInit {
    clientId?: string;
    clientSecret?: string;
    market?: string | null;
    createStream?: (ext: SpotifyExtractor, url: string) => Promise<Readable | string>;
}

declare class SpotifyExtractor extends BaseExtractor<SpotifyExtractorInit> {
    static identifier: "com.discord-player.spotifyextractor";
    private _stream;
    private _credentials;
    private _market;
    internal: SpotifyAPI;
    activate(): Promise<void>;
    deactivate(): Promise<void>;
    validate(query: string): Promise<boolean>;
    buildTrack(trackInfo: any, requestedBy: User | null | undefined, playlist?: Playlist): Track;
    buildPlaylist(data: any, context: ExtractorSearchContext, type?: "album" | "playlist"): Playlist;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    stream(info: Track): Promise<ExtractorStreamable>;
    getRelatedTracks(track: Track, history: GuildQueueHistory): Promise<ExtractorInfo>;
}

export { SpotifyExtractor, type SpotifyExtractorInit, parseSpotifyUrl };
